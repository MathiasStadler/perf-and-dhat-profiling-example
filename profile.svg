<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="726" onload="init(evt)" viewBox="0 0 1200 726" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="726" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="709.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="709.00"> </text><svg id="frames" x="10" width="1180" total_samples="71"><g><title>__pthread_getattr_np (1 samples, 1.41%)</title><rect x="0.0000%" y="581" width="1.4085%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="1"/><text x="0.2500%" y="591.50"></text></g><g><title>_IO_new_fopen (1 samples, 1.41%)</title><rect x="0.0000%" y="565" width="1.4085%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="1"/><text x="0.2500%" y="575.50"></text></g><g><title>__fopen_internal (1 samples, 1.41%)</title><rect x="0.0000%" y="549" width="1.4085%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="1"/><text x="0.2500%" y="559.50"></text></g><g><title>_IO_new_file_fopen (1 samples, 1.41%)</title><rect x="0.0000%" y="533" width="1.4085%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="1"/><text x="0.2500%" y="543.50"></text></g><g><title>__GI__IO_file_open (1 samples, 1.41%)</title><rect x="0.0000%" y="517" width="1.4085%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="1"/><text x="0.2500%" y="527.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 1.41%)</title><rect x="0.0000%" y="501" width="1.4085%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="1"/><text x="0.2500%" y="511.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.41%)</title><rect x="0.0000%" y="485" width="1.4085%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="495.50"></text></g><g><title>do_syscall_64 (1 samples, 1.41%)</title><rect x="0.0000%" y="469" width="1.4085%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="1"/><text x="0.2500%" y="479.50"></text></g><g><title>__x64_sys_openat (1 samples, 1.41%)</title><rect x="0.0000%" y="453" width="1.4085%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="463.50"></text></g><g><title>do_sys_openat2 (1 samples, 1.41%)</title><rect x="0.0000%" y="437" width="1.4085%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="1"/><text x="0.2500%" y="447.50"></text></g><g><title>do_filp_open (1 samples, 1.41%)</title><rect x="0.0000%" y="421" width="1.4085%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="1"/><text x="0.2500%" y="431.50"></text></g><g><title>path_openat (1 samples, 1.41%)</title><rect x="0.0000%" y="405" width="1.4085%" height="15" fill="rgb(240,193,28)" fg:x="0" fg:w="1"/><text x="0.2500%" y="415.50"></text></g><g><title>do_open (1 samples, 1.41%)</title><rect x="0.0000%" y="389" width="1.4085%" height="15" fill="rgb(216,20,37)" fg:x="0" fg:w="1"/><text x="0.2500%" y="399.50"></text></g><g><title>vfs_open (1 samples, 1.41%)</title><rect x="0.0000%" y="373" width="1.4085%" height="15" fill="rgb(206,188,39)" fg:x="0" fg:w="1"/><text x="0.2500%" y="383.50"></text></g><g><title>do_dentry_open (1 samples, 1.41%)</title><rect x="0.0000%" y="357" width="1.4085%" height="15" fill="rgb(217,207,13)" fg:x="0" fg:w="1"/><text x="0.2500%" y="367.50"></text></g><g><title>pid_maps_open (1 samples, 1.41%)</title><rect x="0.0000%" y="341" width="1.4085%" height="15" fill="rgb(231,73,38)" fg:x="0" fg:w="1"/><text x="0.2500%" y="351.50"></text></g><g><title>__seq_open_private (1 samples, 1.41%)</title><rect x="0.0000%" y="325" width="1.4085%" height="15" fill="rgb(225,20,46)" fg:x="0" fg:w="1"/><text x="0.2500%" y="335.50"></text></g><g><title>__kmalloc (1 samples, 1.41%)</title><rect x="0.0000%" y="309" width="1.4085%" height="15" fill="rgb(210,31,41)" fg:x="0" fg:w="1"/><text x="0.2500%" y="319.50"></text></g><g><title>obj_cgroup_charge (1 samples, 1.41%)</title><rect x="0.0000%" y="293" width="1.4085%" height="15" fill="rgb(221,200,47)" fg:x="0" fg:w="1"/><text x="0.2500%" y="303.50"></text></g><g><title>memcg_account_kmem (1 samples, 1.41%)</title><rect x="0.0000%" y="277" width="1.4085%" height="15" fill="rgb(226,26,5)" fg:x="0" fg:w="1"/><text x="0.2500%" y="287.50"></text></g><g><title>__mod_memcg_state (1 samples, 1.41%)</title><rect x="0.0000%" y="261" width="1.4085%" height="15" fill="rgb(249,33,26)" fg:x="0" fg:w="1"/><text x="0.2500%" y="271.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (1 samples, 1.41%)</title><rect x="1.4085%" y="357" width="1.4085%" height="15" fill="rgb(235,183,28)" fg:x="1" fg:w="1"/><text x="1.6585%" y="367.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (1 samples, 1.41%)</title><rect x="1.4085%" y="341" width="1.4085%" height="15" fill="rgb(221,5,38)" fg:x="1" fg:w="1"/><text x="1.6585%" y="351.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (1 samples, 1.41%)</title><rect x="1.4085%" y="325" width="1.4085%" height="15" fill="rgb(247,18,42)" fg:x="1" fg:w="1"/><text x="1.6585%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 1.41%)</title><rect x="1.4085%" y="309" width="1.4085%" height="15" fill="rgb(241,131,45)" fg:x="1" fg:w="1"/><text x="1.6585%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 1.41%)</title><rect x="1.4085%" y="293" width="1.4085%" height="15" fill="rgb(249,31,29)" fg:x="1" fg:w="1"/><text x="1.6585%" y="303.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 4.23%)</title><rect x="2.8169%" y="229" width="4.2254%" height="15" fill="rgb(225,111,53)" fg:x="2" fg:w="3"/><text x="3.0669%" y="239.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 2.82%)</title><rect x="4.2254%" y="213" width="2.8169%" height="15" fill="rgb(238,160,17)" fg:x="3" fg:w="2"/><text x="4.4754%" y="223.50">&lt;c..</text></g><g><title>&lt;perf_and_dhat_profiling_example::Field as core::hash::Hash&gt;::hash (4 samples, 5.63%)</title><rect x="2.8169%" y="325" width="5.6338%" height="15" fill="rgb(214,148,48)" fg:x="2" fg:w="4"/><text x="3.0669%" y="335.50">&lt;perf_a..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (4 samples, 5.63%)</title><rect x="2.8169%" y="309" width="5.6338%" height="15" fill="rgb(232,36,49)" fg:x="2" fg:w="4"/><text x="3.0669%" y="319.50">core::h..</text></g><g><title>core::hash::Hasher::write_isize (4 samples, 5.63%)</title><rect x="2.8169%" y="293" width="5.6338%" height="15" fill="rgb(209,103,24)" fg:x="2" fg:w="4"/><text x="3.0669%" y="303.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (4 samples, 5.63%)</title><rect x="2.8169%" y="277" width="5.6338%" height="15" fill="rgb(229,88,8)" fg:x="2" fg:w="4"/><text x="3.0669%" y="287.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 5.63%)</title><rect x="2.8169%" y="261" width="5.6338%" height="15" fill="rgb(213,181,19)" fg:x="2" fg:w="4"/><text x="3.0669%" y="271.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 5.63%)</title><rect x="2.8169%" y="245" width="5.6338%" height="15" fill="rgb(254,191,54)" fg:x="2" fg:w="4"/><text x="3.0669%" y="255.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_isize (1 samples, 1.41%)</title><rect x="7.0423%" y="229" width="1.4085%" height="15" fill="rgb(241,83,37)" fg:x="5" fg:w="1"/><text x="7.2923%" y="239.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 4.23%)</title><rect x="9.8592%" y="245" width="4.2254%" height="15" fill="rgb(233,36,39)" fg:x="7" fg:w="3"/><text x="10.1092%" y="255.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (3 samples, 4.23%)</title><rect x="9.8592%" y="229" width="4.2254%" height="15" fill="rgb(226,3,54)" fg:x="7" fg:w="3"/><text x="10.1092%" y="239.50">&lt;core..</text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 2.82%)</title><rect x="11.2676%" y="213" width="2.8169%" height="15" fill="rgb(245,192,40)" fg:x="8" fg:w="2"/><text x="11.5176%" y="223.50">co..</text></g><g><title>hashbrown::map::make_hash (10 samples, 14.08%)</title><rect x="1.4085%" y="389" width="14.0845%" height="15" fill="rgb(238,167,29)" fg:x="1" fg:w="10"/><text x="1.6585%" y="399.50">hashbrown::map::make_..</text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 14.08%)</title><rect x="1.4085%" y="373" width="14.0845%" height="15" fill="rgb(232,182,51)" fg:x="1" fg:w="10"/><text x="1.6585%" y="383.50">core::hash::BuildHash..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (9 samples, 12.68%)</title><rect x="2.8169%" y="357" width="12.6761%" height="15" fill="rgb(231,60,39)" fg:x="2" fg:w="9"/><text x="3.0669%" y="367.50">core::hash::impls::..</text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::hash::Hash&gt;::hash (9 samples, 12.68%)</title><rect x="2.8169%" y="341" width="12.6761%" height="15" fill="rgb(208,69,12)" fg:x="2" fg:w="9"/><text x="3.0669%" y="351.50">&lt;core::option::Opti..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (5 samples, 7.04%)</title><rect x="8.4507%" y="325" width="7.0423%" height="15" fill="rgb(235,93,37)" fg:x="6" fg:w="5"/><text x="8.7007%" y="335.50">core::has..</text></g><g><title>core::hash::Hasher::write_isize (5 samples, 7.04%)</title><rect x="8.4507%" y="309" width="7.0423%" height="15" fill="rgb(213,116,39)" fg:x="6" fg:w="5"/><text x="8.7007%" y="319.50">core::has..</text></g><g><title>core::hash::Hasher::write_usize (4 samples, 5.63%)</title><rect x="9.8592%" y="293" width="5.6338%" height="15" fill="rgb(222,207,29)" fg:x="7" fg:w="4"/><text x="10.1092%" y="303.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 5.63%)</title><rect x="9.8592%" y="277" width="5.6338%" height="15" fill="rgb(206,96,30)" fg:x="7" fg:w="4"/><text x="10.1092%" y="287.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 5.63%)</title><rect x="9.8592%" y="261" width="5.6338%" height="15" fill="rgb(218,138,4)" fg:x="7" fg:w="4"/><text x="10.1092%" y="271.50">&lt;core::..</text></g><g><title>core::hash::Hasher::write_isize (1 samples, 1.41%)</title><rect x="14.0845%" y="245" width="1.4085%" height="15" fill="rgb(250,191,14)" fg:x="10" fg:w="1"/><text x="14.3345%" y="255.50"></text></g><g><title>perf_and_dhat_profiling_example::histogram (13 samples, 18.31%)</title><rect x="1.4085%" y="517" width="18.3099%" height="15" fill="rgb(239,60,40)" fg:x="1" fg:w="13"/><text x="1.6585%" y="527.50">perf_and_dhat_profiling_examp..</text></g><g><title>&lt;core::iter::adapters::cloned::Cloned&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 18.31%)</title><rect x="1.4085%" y="501" width="18.3099%" height="15" fill="rgb(206,27,48)" fg:x="1" fg:w="13"/><text x="1.6585%" y="511.50">&lt;core::iter::adapters::cloned..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 18.31%)</title><rect x="1.4085%" y="485" width="18.3099%" height="15" fill="rgb(225,35,8)" fg:x="1" fg:w="13"/><text x="1.6585%" y="495.50">&lt;core::iter::adapters::map::M..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (13 samples, 18.31%)</title><rect x="1.4085%" y="469" width="18.3099%" height="15" fill="rgb(250,213,24)" fg:x="1" fg:w="13"/><text x="1.6585%" y="479.50">&lt;core::slice::iter::Iter&lt;T&gt; a..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (13 samples, 18.31%)</title><rect x="1.4085%" y="453" width="18.3099%" height="15" fill="rgb(247,123,22)" fg:x="1" fg:w="13"/><text x="1.6585%" y="463.50">core::iter::adapters::map::ma..</text></g><g><title>perf_and_dhat_profiling_example::histogram::{{closure}} (13 samples, 18.31%)</title><rect x="1.4085%" y="437" width="18.3099%" height="15" fill="rgb(231,138,38)" fg:x="1" fg:w="13"/><text x="1.6585%" y="447.50">perf_and_dhat_profiling_examp..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (13 samples, 18.31%)</title><rect x="1.4085%" y="421" width="18.3099%" height="15" fill="rgb(231,145,46)" fg:x="1" fg:w="13"/><text x="1.6585%" y="431.50">std::collections::hash::map::..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (13 samples, 18.31%)</title><rect x="1.4085%" y="405" width="18.3099%" height="15" fill="rgb(251,118,11)" fg:x="1" fg:w="13"/><text x="1.6585%" y="415.50">hashbrown::rustc_entry::&lt;impl..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 4.23%)</title><rect x="15.4930%" y="389" width="4.2254%" height="15" fill="rgb(217,147,25)" fg:x="11" fg:w="3"/><text x="15.7430%" y="399.50">hashb..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 4.23%)</title><rect x="15.4930%" y="373" width="4.2254%" height="15" fill="rgb(247,81,37)" fg:x="11" fg:w="3"/><text x="15.7430%" y="383.50">hashb..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 4.23%)</title><rect x="15.4930%" y="357" width="4.2254%" height="15" fill="rgb(209,12,38)" fg:x="11" fg:w="3"/><text x="15.7430%" y="367.50">hashb..</text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 4.23%)</title><rect x="15.4930%" y="341" width="4.2254%" height="15" fill="rgb(227,1,9)" fg:x="11" fg:w="3"/><text x="15.7430%" y="351.50">core:..</text></g><g><title>csv::byte_record::ByteRecord::iter (2 samples, 2.82%)</title><rect x="19.7183%" y="501" width="2.8169%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="2"/><text x="19.9683%" y="511.50">cs..</text></g><g><title>&lt;&amp;csv::byte_record::ByteRecord as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 2.82%)</title><rect x="19.7183%" y="485" width="2.8169%" height="15" fill="rgb(221,10,30)" fg:x="14" fg:w="2"/><text x="19.9683%" y="495.50">&lt;&amp;..</text></g><g><title>csv::byte_record::ByteRecord::as_slice (2 samples, 2.82%)</title><rect x="19.7183%" y="469" width="2.8169%" height="15" fill="rgb(210,229,1)" fg:x="14" fg:w="2"/><text x="19.9683%" y="479.50">cs..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 1.41%)</title><rect x="21.1268%" y="453" width="1.4085%" height="15" fill="rgb(222,148,37)" fg:x="15" fg:w="1"/><text x="21.3768%" y="463.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 1.41%)</title><rect x="21.1268%" y="437" width="1.4085%" height="15" fill="rgb(234,67,33)" fg:x="15" fg:w="1"/><text x="21.3768%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 1.41%)</title><rect x="21.1268%" y="421" width="1.4085%" height="15" fill="rgb(247,98,35)" fg:x="15" fg:w="1"/><text x="21.3768%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 1.41%)</title><rect x="21.1268%" y="405" width="1.4085%" height="15" fill="rgb(247,138,52)" fg:x="15" fg:w="1"/><text x="21.3768%" y="415.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::from_reader (1 samples, 1.41%)</title><rect x="22.5352%" y="501" width="1.4085%" height="15" fill="rgb(213,79,30)" fg:x="16" fg:w="1"/><text x="22.7852%" y="511.50"></text></g><g><title>csv::reader::ReaderBuilder::from_reader (1 samples, 1.41%)</title><rect x="22.5352%" y="485" width="1.4085%" height="15" fill="rgb(246,177,23)" fg:x="16" fg:w="1"/><text x="22.7852%" y="495.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::new (1 samples, 1.41%)</title><rect x="22.5352%" y="469" width="1.4085%" height="15" fill="rgb(230,62,27)" fg:x="16" fg:w="1"/><text x="22.7852%" y="479.50"></text></g><g><title>csv_core::reader::ReaderBuilder::build (1 samples, 1.41%)</title><rect x="22.5352%" y="453" width="1.4085%" height="15" fill="rgb(216,154,8)" fg:x="16" fg:w="1"/><text x="22.7852%" y="463.50"></text></g><g><title>csv_core::reader::Reader::build_dfa (1 samples, 1.41%)</title><rect x="22.5352%" y="437" width="1.4085%" height="15" fill="rgb(244,35,45)" fg:x="16" fg:w="1"/><text x="22.7852%" y="447.50"></text></g><g><title>csv::reader::Reader&lt;R&gt;::headers (7 samples, 9.86%)</title><rect x="23.9437%" y="501" width="9.8592%" height="15" fill="rgb(251,115,12)" fg:x="17" fg:w="7"/><text x="24.1937%" y="511.50">csv::reader::R..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (7 samples, 9.86%)</title><rect x="23.9437%" y="485" width="9.8592%" height="15" fill="rgb(240,54,50)" fg:x="17" fg:w="7"/><text x="24.1937%" y="495.50">csv::reader::R..</text></g><g><title>csv_core::reader::Reader::read_record (7 samples, 9.86%)</title><rect x="23.9437%" y="469" width="9.8592%" height="15" fill="rgb(233,84,52)" fg:x="17" fg:w="7"/><text x="24.1937%" y="479.50">csv_core::read..</text></g><g><title>asm_exc_page_fault (7 samples, 9.86%)</title><rect x="23.9437%" y="453" width="9.8592%" height="15" fill="rgb(207,117,47)" fg:x="17" fg:w="7"/><text x="24.1937%" y="463.50">asm_exc_page_f..</text></g><g><title>exc_page_fault (7 samples, 9.86%)</title><rect x="23.9437%" y="437" width="9.8592%" height="15" fill="rgb(249,43,39)" fg:x="17" fg:w="7"/><text x="24.1937%" y="447.50">exc_page_fault</text></g><g><title>irqentry_exit (7 samples, 9.86%)</title><rect x="23.9437%" y="421" width="9.8592%" height="15" fill="rgb(209,38,44)" fg:x="17" fg:w="7"/><text x="24.1937%" y="431.50">irqentry_exit</text></g><g><title>irqentry_exit_to_user_mode (7 samples, 9.86%)</title><rect x="23.9437%" y="405" width="9.8592%" height="15" fill="rgb(236,212,23)" fg:x="17" fg:w="7"/><text x="24.1937%" y="415.50">irqentry_exit_..</text></g><g><title>exit_to_user_mode_prepare (7 samples, 9.86%)</title><rect x="23.9437%" y="389" width="9.8592%" height="15" fill="rgb(242,79,21)" fg:x="17" fg:w="7"/><text x="24.1937%" y="399.50">exit_to_user_m..</text></g><g><title>exit_to_user_mode_loop (7 samples, 9.86%)</title><rect x="23.9437%" y="373" width="9.8592%" height="15" fill="rgb(211,96,35)" fg:x="17" fg:w="7"/><text x="24.1937%" y="383.50">exit_to_user_m..</text></g><g><title>schedule (7 samples, 9.86%)</title><rect x="23.9437%" y="357" width="9.8592%" height="15" fill="rgb(253,215,40)" fg:x="17" fg:w="7"/><text x="24.1937%" y="367.50">schedule</text></g><g><title>__schedule (7 samples, 9.86%)</title><rect x="23.9437%" y="341" width="9.8592%" height="15" fill="rgb(211,81,21)" fg:x="17" fg:w="7"/><text x="24.1937%" y="351.50">__schedule</text></g><g><title>finish_task_switch.isra.0 (7 samples, 9.86%)</title><rect x="23.9437%" y="325" width="9.8592%" height="15" fill="rgb(208,190,38)" fg:x="17" fg:w="7"/><text x="24.1937%" y="335.50">finish_task_sw..</text></g><g><title>__perf_event_task_sched_in (7 samples, 9.86%)</title><rect x="23.9437%" y="309" width="9.8592%" height="15" fill="rgb(235,213,38)" fg:x="17" fg:w="7"/><text x="24.1937%" y="319.50">__perf_event_t..</text></g><g><title>x86_pmu_enable (6 samples, 8.45%)</title><rect x="25.3521%" y="293" width="8.4507%" height="15" fill="rgb(237,122,38)" fg:x="18" fg:w="6"/><text x="25.6021%" y="303.50">x86_pmu_enab..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (6 samples, 8.45%)</title><rect x="25.3521%" y="277" width="8.4507%" height="15" fill="rgb(244,218,35)" fg:x="18" fg:w="6"/><text x="25.6021%" y="287.50">__intel_pmu_..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (1 samples, 1.41%)</title><rect x="33.8028%" y="469" width="1.4085%" height="15" fill="rgb(240,68,47)" fg:x="24" fg:w="1"/><text x="34.0528%" y="479.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (1 samples, 1.41%)</title><rect x="33.8028%" y="453" width="1.4085%" height="15" fill="rgb(210,16,53)" fg:x="24" fg:w="1"/><text x="34.0528%" y="463.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 1.41%)</title><rect x="33.8028%" y="437" width="1.4085%" height="15" fill="rgb(235,124,12)" fg:x="24" fg:w="1"/><text x="34.0528%" y="447.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 1.41%)</title><rect x="33.8028%" y="421" width="1.4085%" height="15" fill="rgb(224,169,11)" fg:x="24" fg:w="1"/><text x="34.0528%" y="431.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked_mut (1 samples, 1.41%)</title><rect x="33.8028%" y="405" width="1.4085%" height="15" fill="rgb(250,166,2)" fg:x="24" fg:w="1"/><text x="34.0528%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 1.41%)</title><rect x="33.8028%" y="389" width="1.4085%" height="15" fill="rgb(242,216,29)" fg:x="24" fg:w="1"/><text x="34.0528%" y="399.50"></text></g><g><title>csv::reader::ReaderState::add_record (1 samples, 1.41%)</title><rect x="35.2113%" y="469" width="1.4085%" height="15" fill="rgb(230,116,27)" fg:x="25" fg:w="1"/><text x="35.4613%" y="479.50"></text></g><g><title>csv::byte_record::Position::set_record (1 samples, 1.41%)</title><rect x="35.2113%" y="453" width="1.4085%" height="15" fill="rgb(228,99,48)" fg:x="25" fg:w="1"/><text x="35.4613%" y="463.50"></text></g><g><title>core::cmp::PartialOrd::ge (1 samples, 1.41%)</title><rect x="46.4789%" y="437" width="1.4085%" height="15" fill="rgb(253,11,6)" fg:x="33" fg:w="1"/><text x="46.7289%" y="447.50"></text></g><g><title>&lt;csv_core::reader::DfaState as core::cmp::PartialOrd&gt;::partial_cmp (1 samples, 1.41%)</title><rect x="46.4789%" y="421" width="1.4085%" height="15" fill="rgb(247,143,39)" fg:x="33" fg:w="1"/><text x="46.7289%" y="431.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u8&gt;::partial_cmp (1 samples, 1.41%)</title><rect x="46.4789%" y="405" width="1.4085%" height="15" fill="rgb(236,97,10)" fg:x="33" fg:w="1"/><text x="46.7289%" y="415.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for u8&gt;::cmp (1 samples, 1.41%)</title><rect x="46.4789%" y="389" width="1.4085%" height="15" fill="rgb(233,208,19)" fg:x="33" fg:w="1"/><text x="46.7289%" y="399.50"></text></g><g><title>csv_core::reader::Dfa::get_output (2 samples, 2.82%)</title><rect x="47.8873%" y="437" width="2.8169%" height="15" fill="rgb(216,164,2)" fg:x="34" fg:w="2"/><text x="48.1373%" y="447.50">cs..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record (16 samples, 22.54%)</title><rect x="33.8028%" y="501" width="22.5352%" height="15" fill="rgb(220,129,5)" fg:x="24" fg:w="16"/><text x="34.0528%" y="511.50">csv::reader::Reader&lt;R&gt;::read_byte_re..</text></g><g><title>csv::reader::Reader&lt;R&gt;::read_byte_record_impl (16 samples, 22.54%)</title><rect x="33.8028%" y="485" width="22.5352%" height="15" fill="rgb(242,17,10)" fg:x="24" fg:w="16"/><text x="34.0528%" y="495.50">csv::reader::Reader&lt;R&gt;::read_byte_re..</text></g><g><title>csv_core::reader::Reader::read_record (14 samples, 19.72%)</title><rect x="36.6197%" y="469" width="19.7183%" height="15" fill="rgb(242,107,0)" fg:x="26" fg:w="14"/><text x="36.8697%" y="479.50">csv_core::reader::Reader::read_..</text></g><g><title>csv_core::reader::Reader::read_record_dfa (14 samples, 19.72%)</title><rect x="36.6197%" y="453" width="19.7183%" height="15" fill="rgb(251,28,31)" fg:x="26" fg:w="14"/><text x="36.8697%" y="463.50">csv_core::reader::Reader::read_..</text></g><g><title>csv_core::reader::DfaClasses::scan_and_copy (4 samples, 5.63%)</title><rect x="50.7042%" y="437" width="5.6338%" height="15" fill="rgb(233,223,10)" fg:x="36" fg:w="4"/><text x="50.9542%" y="447.50">csv_cor..</text></g><g><title>core::num::dec2flt::parse::parse_number (1 samples, 1.41%)</title><rect x="56.3380%" y="437" width="1.4085%" height="15" fill="rgb(215,21,27)" fg:x="40" fg:w="1"/><text x="56.5880%" y="447.50"></text></g><g><title>core::num::dec2flt::parse::parse_partial_number (1 samples, 1.41%)</title><rect x="56.3380%" y="421" width="1.4085%" height="15" fill="rgb(232,23,21)" fg:x="40" fg:w="1"/><text x="56.5880%" y="431.50"></text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (1 samples, 1.41%)</title><rect x="56.3380%" y="405" width="1.4085%" height="15" fill="rgb(244,5,23)" fg:x="40" fg:w="1"/><text x="56.5880%" y="415.50"></text></g><g><title>core::str::&lt;impl str&gt;::parse (3 samples, 4.23%)</title><rect x="56.3380%" y="485" width="4.2254%" height="15" fill="rgb(226,81,46)" fg:x="40" fg:w="3"/><text x="56.5880%" y="495.50">core:..</text></g><g><title>core::num::dec2flt::&lt;impl core::str::traits::FromStr for f64&gt;::from_str (3 samples, 4.23%)</title><rect x="56.3380%" y="469" width="4.2254%" height="15" fill="rgb(247,70,30)" fg:x="40" fg:w="3"/><text x="56.5880%" y="479.50">core:..</text></g><g><title>core::num::dec2flt::dec2flt (3 samples, 4.23%)</title><rect x="56.3380%" y="453" width="4.2254%" height="15" fill="rgb(212,68,19)" fg:x="40" fg:w="3"/><text x="56.5880%" y="463.50">core:..</text></g><g><title>core::slice::&lt;impl [T]&gt;::first (2 samples, 2.82%)</title><rect x="57.7465%" y="437" width="2.8169%" height="15" fill="rgb(240,187,13)" fg:x="41" fg:w="2"/><text x="57.9965%" y="447.50">co..</text></g><g><title>perf_and_dhat_profiling_example::read_csv (36 samples, 50.70%)</title><rect x="19.7183%" y="517" width="50.7042%" height="15" fill="rgb(223,113,26)" fg:x="14" fg:w="36"/><text x="19.9683%" y="527.50">perf_and_dhat_profiling_example::read_csv</text></g><g><title>perf_and_dhat_profiling_example::parse (10 samples, 14.08%)</title><rect x="56.3380%" y="501" width="14.0845%" height="15" fill="rgb(206,192,2)" fg:x="40" fg:w="10"/><text x="56.5880%" y="511.50">perf_and_dhat_profili..</text></g><g><title>core::str::converts::from_utf8 (7 samples, 9.86%)</title><rect x="60.5634%" y="485" width="9.8592%" height="15" fill="rgb(241,108,4)" fg:x="43" fg:w="7"/><text x="60.8134%" y="495.50">core::str::con..</text></g><g><title>core::str::validations::run_utf8_validation (7 samples, 9.86%)</title><rect x="60.5634%" y="469" width="9.8592%" height="15" fill="rgb(247,173,49)" fg:x="43" fg:w="7"/><text x="60.8134%" y="479.50">core::str::val..</text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 1.41%)</title><rect x="69.0141%" y="453" width="1.4085%" height="15" fill="rgb(224,114,35)" fg:x="49" fg:w="1"/><text x="69.2641%" y="463.50"></text></g><g><title>blk_cgroup_congested (1 samples, 1.41%)</title><rect x="71.8310%" y="101" width="1.4085%" height="15" fill="rgb(245,159,27)" fg:x="51" fg:w="1"/><text x="72.0810%" y="111.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 1.41%)</title><rect x="73.2394%" y="101" width="1.4085%" height="15" fill="rgb(245,172,44)" fg:x="52" fg:w="1"/><text x="73.4894%" y="111.50"></text></g><g><title>lru_cache_add (1 samples, 1.41%)</title><rect x="73.2394%" y="85" width="1.4085%" height="15" fill="rgb(236,23,11)" fg:x="52" fg:w="1"/><text x="73.4894%" y="95.50"></text></g><g><title>folio_add_lru (1 samples, 1.41%)</title><rect x="73.2394%" y="69" width="1.4085%" height="15" fill="rgb(205,117,38)" fg:x="52" fg:w="1"/><text x="73.4894%" y="79.50"></text></g><g><title>__pagevec_lru_add (1 samples, 1.41%)</title><rect x="73.2394%" y="53" width="1.4085%" height="15" fill="rgb(237,72,25)" fg:x="52" fg:w="1"/><text x="73.4894%" y="63.50"></text></g><g><title>release_pages (1 samples, 1.41%)</title><rect x="73.2394%" y="37" width="1.4085%" height="15" fill="rgb(244,70,9)" fg:x="52" fg:w="1"/><text x="73.4894%" y="47.50"></text></g><g><title>copy_user_enhanced_fast_string (4 samples, 5.63%)</title><rect x="70.4225%" y="229" width="5.6338%" height="15" fill="rgb(217,125,39)" fg:x="50" fg:w="4"/><text x="70.6725%" y="239.50">copy_us..</text></g><g><title>asm_exc_page_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="213" width="5.6338%" height="15" fill="rgb(235,36,10)" fg:x="50" fg:w="4"/><text x="70.6725%" y="223.50">asm_exc..</text></g><g><title>exc_page_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="197" width="5.6338%" height="15" fill="rgb(251,123,47)" fg:x="50" fg:w="4"/><text x="70.6725%" y="207.50">exc_pag..</text></g><g><title>do_user_addr_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="181" width="5.6338%" height="15" fill="rgb(221,13,13)" fg:x="50" fg:w="4"/><text x="70.6725%" y="191.50">do_user..</text></g><g><title>handle_mm_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="165" width="5.6338%" height="15" fill="rgb(238,131,9)" fg:x="50" fg:w="4"/><text x="70.6725%" y="175.50">handle_..</text></g><g><title>__handle_mm_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="149" width="5.6338%" height="15" fill="rgb(211,50,8)" fg:x="50" fg:w="4"/><text x="70.6725%" y="159.50">__handl..</text></g><g><title>handle_pte_fault (4 samples, 5.63%)</title><rect x="70.4225%" y="133" width="5.6338%" height="15" fill="rgb(245,182,24)" fg:x="50" fg:w="4"/><text x="70.6725%" y="143.50">handle_..</text></g><g><title>do_anonymous_page (4 samples, 5.63%)</title><rect x="70.4225%" y="117" width="5.6338%" height="15" fill="rgb(242,14,37)" fg:x="50" fg:w="4"/><text x="70.6725%" y="127.50">do_anon..</text></g><g><title>pfn_pte (1 samples, 1.41%)</title><rect x="74.6479%" y="101" width="1.4085%" height="15" fill="rgb(246,228,12)" fg:x="53" fg:w="1"/><text x="74.8979%" y="111.50"></text></g><g><title>__libc_start_main_impl (55 samples, 77.46%)</title><rect x="0.0000%" y="629" width="77.4648%" height="15" fill="rgb(213,55,15)" fg:x="0" fg:w="55"/><text x="0.2500%" y="639.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (55 samples, 77.46%)</title><rect x="0.0000%" y="613" width="77.4648%" height="15" fill="rgb(209,9,3)" fg:x="0" fg:w="55"/><text x="0.2500%" y="623.50">__libc_start_call_main</text></g><g><title>main (55 samples, 77.46%)</title><rect x="0.0000%" y="597" width="77.4648%" height="15" fill="rgb(230,59,30)" fg:x="0" fg:w="55"/><text x="0.2500%" y="607.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (54 samples, 76.06%)</title><rect x="1.4085%" y="581" width="76.0563%" height="15" fill="rgb(209,121,21)" fg:x="1" fg:w="54"/><text x="1.6585%" y="591.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (54 samples, 76.06%)</title><rect x="1.4085%" y="565" width="76.0563%" height="15" fill="rgb(220,109,13)" fg:x="1" fg:w="54"/><text x="1.6585%" y="575.50">core::ops::function::FnOnce::call_once</text></g><g><title>perf_and_dhat_profiling_example::main (54 samples, 76.06%)</title><rect x="1.4085%" y="549" width="76.0563%" height="15" fill="rgb(232,18,1)" fg:x="1" fg:w="54"/><text x="1.6585%" y="559.50">perf_and_dhat_profiling_example::main</text></g><g><title>perf_and_dhat_profiling_example::go (54 samples, 76.06%)</title><rect x="1.4085%" y="533" width="76.0563%" height="15" fill="rgb(215,41,42)" fg:x="1" fg:w="54"/><text x="1.6585%" y="543.50">perf_and_dhat_profiling_example::go</text></g><g><title>perf_and_dhat_profiling_example::read_file (5 samples, 7.04%)</title><rect x="70.4225%" y="517" width="7.0423%" height="15" fill="rgb(224,123,36)" fg:x="50" fg:w="5"/><text x="70.6725%" y="527.50">perf_and_..</text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read_to_end (5 samples, 7.04%)</title><rect x="70.4225%" y="501" width="7.0423%" height="15" fill="rgb(240,125,3)" fg:x="50" fg:w="5"/><text x="70.6725%" y="511.50">&lt;std::io:..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_end (5 samples, 7.04%)</title><rect x="70.4225%" y="485" width="7.0423%" height="15" fill="rgb(205,98,50)" fg:x="50" fg:w="5"/><text x="70.6725%" y="495.50">&lt;std::fs:..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_to_end (5 samples, 7.04%)</title><rect x="70.4225%" y="469" width="7.0423%" height="15" fill="rgb(205,185,37)" fg:x="50" fg:w="5"/><text x="70.6725%" y="479.50">&lt;&amp;std::fs..</text></g><g><title>std::io::default_read_to_end (5 samples, 7.04%)</title><rect x="70.4225%" y="453" width="7.0423%" height="15" fill="rgb(238,207,15)" fg:x="50" fg:w="5"/><text x="70.6725%" y="463.50">std::io::..</text></g><g><title>&lt;&amp;std::fs::File as std::io::Read&gt;::read_buf (5 samples, 7.04%)</title><rect x="70.4225%" y="437" width="7.0423%" height="15" fill="rgb(213,199,42)" fg:x="50" fg:w="5"/><text x="70.6725%" y="447.50">&lt;&amp;std::fs..</text></g><g><title>std::sys::unix::fs::File::read_buf (5 samples, 7.04%)</title><rect x="70.4225%" y="421" width="7.0423%" height="15" fill="rgb(235,201,11)" fg:x="50" fg:w="5"/><text x="70.6725%" y="431.50">std::sys:..</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (5 samples, 7.04%)</title><rect x="70.4225%" y="405" width="7.0423%" height="15" fill="rgb(207,46,11)" fg:x="50" fg:w="5"/><text x="70.6725%" y="415.50">std::sys:..</text></g><g><title>__GI___libc_read (5 samples, 7.04%)</title><rect x="70.4225%" y="389" width="7.0423%" height="15" fill="rgb(241,35,35)" fg:x="50" fg:w="5"/><text x="70.6725%" y="399.50">__GI___li..</text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 7.04%)</title><rect x="70.4225%" y="373" width="7.0423%" height="15" fill="rgb(243,32,47)" fg:x="50" fg:w="5"/><text x="70.6725%" y="383.50">entry_SYS..</text></g><g><title>do_syscall_64 (5 samples, 7.04%)</title><rect x="70.4225%" y="357" width="7.0423%" height="15" fill="rgb(247,202,23)" fg:x="50" fg:w="5"/><text x="70.6725%" y="367.50">do_syscal..</text></g><g><title>__x64_sys_read (5 samples, 7.04%)</title><rect x="70.4225%" y="341" width="7.0423%" height="15" fill="rgb(219,102,11)" fg:x="50" fg:w="5"/><text x="70.6725%" y="351.50">__x64_sys..</text></g><g><title>ksys_read (5 samples, 7.04%)</title><rect x="70.4225%" y="325" width="7.0423%" height="15" fill="rgb(243,110,44)" fg:x="50" fg:w="5"/><text x="70.6725%" y="335.50">ksys_read</text></g><g><title>vfs_read (5 samples, 7.04%)</title><rect x="70.4225%" y="309" width="7.0423%" height="15" fill="rgb(222,74,54)" fg:x="50" fg:w="5"/><text x="70.6725%" y="319.50">vfs_read</text></g><g><title>new_sync_read (5 samples, 7.04%)</title><rect x="70.4225%" y="293" width="7.0423%" height="15" fill="rgb(216,99,12)" fg:x="50" fg:w="5"/><text x="70.6725%" y="303.50">new_sync_..</text></g><g><title>ext4_file_read_iter (5 samples, 7.04%)</title><rect x="70.4225%" y="277" width="7.0423%" height="15" fill="rgb(226,22,26)" fg:x="50" fg:w="5"/><text x="70.6725%" y="287.50">ext4_file..</text></g><g><title>generic_file_read_iter (5 samples, 7.04%)</title><rect x="70.4225%" y="261" width="7.0423%" height="15" fill="rgb(217,163,10)" fg:x="50" fg:w="5"/><text x="70.6725%" y="271.50">generic_f..</text></g><g><title>filemap_read (5 samples, 7.04%)</title><rect x="70.4225%" y="245" width="7.0423%" height="15" fill="rgb(213,25,53)" fg:x="50" fg:w="5"/><text x="70.6725%" y="255.50">filemap_r..</text></g><g><title>restore_regs_and_return_to_kernel (1 samples, 1.41%)</title><rect x="76.0563%" y="229" width="1.4085%" height="15" fill="rgb(252,105,26)" fg:x="54" fg:w="1"/><text x="76.3063%" y="239.50"></text></g><g><title>__libc_early_init (1 samples, 1.41%)</title><rect x="77.4648%" y="565" width="1.4085%" height="15" fill="rgb(220,39,43)" fg:x="55" fg:w="1"/><text x="77.7148%" y="575.50"></text></g><g><title>__pthread_early_init (1 samples, 1.41%)</title><rect x="77.4648%" y="549" width="1.4085%" height="15" fill="rgb(229,68,48)" fg:x="55" fg:w="1"/><text x="77.7148%" y="559.50"></text></g><g><title>asm_exc_page_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="533" width="1.4085%" height="15" fill="rgb(252,8,32)" fg:x="55" fg:w="1"/><text x="77.7148%" y="543.50"></text></g><g><title>exc_page_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="517" width="1.4085%" height="15" fill="rgb(223,20,43)" fg:x="55" fg:w="1"/><text x="77.7148%" y="527.50"></text></g><g><title>do_user_addr_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="501" width="1.4085%" height="15" fill="rgb(229,81,49)" fg:x="55" fg:w="1"/><text x="77.7148%" y="511.50"></text></g><g><title>handle_mm_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="485" width="1.4085%" height="15" fill="rgb(236,28,36)" fg:x="55" fg:w="1"/><text x="77.7148%" y="495.50"></text></g><g><title>__handle_mm_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="469" width="1.4085%" height="15" fill="rgb(249,185,26)" fg:x="55" fg:w="1"/><text x="77.7148%" y="479.50"></text></g><g><title>handle_pte_fault (1 samples, 1.41%)</title><rect x="77.4648%" y="453" width="1.4085%" height="15" fill="rgb(249,174,33)" fg:x="55" fg:w="1"/><text x="77.7148%" y="463.50"></text></g><g><title>do_anonymous_page (1 samples, 1.41%)</title><rect x="77.4648%" y="437" width="1.4085%" height="15" fill="rgb(233,201,37)" fg:x="55" fg:w="1"/><text x="77.7148%" y="447.50"></text></g><g><title>lru_cache_add_inactive_or_unevictable (1 samples, 1.41%)</title><rect x="77.4648%" y="421" width="1.4085%" height="15" fill="rgb(221,78,26)" fg:x="55" fg:w="1"/><text x="77.7148%" y="431.50"></text></g><g><title>lru_cache_add (1 samples, 1.41%)</title><rect x="77.4648%" y="405" width="1.4085%" height="15" fill="rgb(250,127,30)" fg:x="55" fg:w="1"/><text x="77.7148%" y="415.50"></text></g><g><title>folio_add_lru (1 samples, 1.41%)</title><rect x="77.4648%" y="389" width="1.4085%" height="15" fill="rgb(230,49,44)" fg:x="55" fg:w="1"/><text x="77.7148%" y="399.50"></text></g><g><title>__pagevec_lru_add (1 samples, 1.41%)</title><rect x="77.4648%" y="373" width="1.4085%" height="15" fill="rgb(229,67,23)" fg:x="55" fg:w="1"/><text x="77.7148%" y="383.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 1.41%)</title><rect x="77.4648%" y="357" width="1.4085%" height="15" fill="rgb(249,83,47)" fg:x="55" fg:w="1"/><text x="77.7148%" y="367.50"></text></g><g><title>_dl_load_cache_lookup (1 samples, 1.41%)</title><rect x="78.8732%" y="501" width="1.4085%" height="15" fill="rgb(215,43,3)" fg:x="56" fg:w="1"/><text x="79.1232%" y="511.50"></text></g><g><title>_dl_sysdep_read_whole_file (1 samples, 1.41%)</title><rect x="78.8732%" y="485" width="1.4085%" height="15" fill="rgb(238,154,13)" fg:x="56" fg:w="1"/><text x="79.1232%" y="495.50"></text></g><g><title>__GI___open64_nocancel (1 samples, 1.41%)</title><rect x="78.8732%" y="469" width="1.4085%" height="15" fill="rgb(219,56,2)" fg:x="56" fg:w="1"/><text x="79.1232%" y="479.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.41%)</title><rect x="78.8732%" y="453" width="1.4085%" height="15" fill="rgb(233,0,4)" fg:x="56" fg:w="1"/><text x="79.1232%" y="463.50"></text></g><g><title>do_syscall_64 (1 samples, 1.41%)</title><rect x="78.8732%" y="437" width="1.4085%" height="15" fill="rgb(235,30,7)" fg:x="56" fg:w="1"/><text x="79.1232%" y="447.50"></text></g><g><title>__x64_sys_openat (1 samples, 1.41%)</title><rect x="78.8732%" y="421" width="1.4085%" height="15" fill="rgb(250,79,13)" fg:x="56" fg:w="1"/><text x="79.1232%" y="431.50"></text></g><g><title>do_sys_openat2 (1 samples, 1.41%)</title><rect x="78.8732%" y="405" width="1.4085%" height="15" fill="rgb(211,146,34)" fg:x="56" fg:w="1"/><text x="79.1232%" y="415.50"></text></g><g><title>getname (1 samples, 1.41%)</title><rect x="78.8732%" y="389" width="1.4085%" height="15" fill="rgb(228,22,38)" fg:x="56" fg:w="1"/><text x="79.1232%" y="399.50"></text></g><g><title>getname_flags.part.0 (1 samples, 1.41%)</title><rect x="78.8732%" y="373" width="1.4085%" height="15" fill="rgb(235,168,5)" fg:x="56" fg:w="1"/><text x="79.1232%" y="383.50"></text></g><g><title>strncpy_from_user (1 samples, 1.41%)</title><rect x="78.8732%" y="357" width="1.4085%" height="15" fill="rgb(221,155,16)" fg:x="56" fg:w="1"/><text x="79.1232%" y="367.50"></text></g><g><title>__check_object_size (1 samples, 1.41%)</title><rect x="78.8732%" y="341" width="1.4085%" height="15" fill="rgb(215,215,53)" fg:x="56" fg:w="1"/><text x="79.1232%" y="351.50"></text></g><g><title>check_heap_object (1 samples, 1.41%)</title><rect x="78.8732%" y="325" width="1.4085%" height="15" fill="rgb(223,4,10)" fg:x="56" fg:w="1"/><text x="79.1232%" y="335.50"></text></g><g><title>_dl_map_segments (1 samples, 1.41%)</title><rect x="80.2817%" y="485" width="1.4085%" height="15" fill="rgb(234,103,6)" fg:x="57" fg:w="1"/><text x="80.5317%" y="495.50"></text></g><g><title>__mmap64 (1 samples, 1.41%)</title><rect x="80.2817%" y="469" width="1.4085%" height="15" fill="rgb(227,97,0)" fg:x="57" fg:w="1"/><text x="80.5317%" y="479.50"></text></g><g><title>__mmap64 (1 samples, 1.41%)</title><rect x="80.2817%" y="453" width="1.4085%" height="15" fill="rgb(234,150,53)" fg:x="57" fg:w="1"/><text x="80.5317%" y="463.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 1.41%)</title><rect x="80.2817%" y="437" width="1.4085%" height="15" fill="rgb(228,201,54)" fg:x="57" fg:w="1"/><text x="80.5317%" y="447.50"></text></g><g><title>do_syscall_64 (1 samples, 1.41%)</title><rect x="80.2817%" y="421" width="1.4085%" height="15" fill="rgb(222,22,37)" fg:x="57" fg:w="1"/><text x="80.5317%" y="431.50"></text></g><g><title>__x64_sys_mmap (1 samples, 1.41%)</title><rect x="80.2817%" y="405" width="1.4085%" height="15" fill="rgb(237,53,32)" fg:x="57" fg:w="1"/><text x="80.5317%" y="415.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 1.41%)</title><rect x="80.2817%" y="389" width="1.4085%" height="15" fill="rgb(233,25,53)" fg:x="57" fg:w="1"/><text x="80.5317%" y="399.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 1.41%)</title><rect x="80.2817%" y="373" width="1.4085%" height="15" fill="rgb(210,40,34)" fg:x="57" fg:w="1"/><text x="80.5317%" y="383.50"></text></g><g><title>do_mmap (1 samples, 1.41%)</title><rect x="80.2817%" y="357" width="1.4085%" height="15" fill="rgb(241,220,44)" fg:x="57" fg:w="1"/><text x="80.5317%" y="367.50"></text></g><g><title>mmap_region (1 samples, 1.41%)</title><rect x="80.2817%" y="341" width="1.4085%" height="15" fill="rgb(235,28,35)" fg:x="57" fg:w="1"/><text x="80.5317%" y="351.50"></text></g><g><title>vm_area_alloc (1 samples, 1.41%)</title><rect x="80.2817%" y="325" width="1.4085%" height="15" fill="rgb(210,56,17)" fg:x="57" fg:w="1"/><text x="80.5317%" y="335.50"></text></g><g><title>kmem_cache_alloc (1 samples, 1.41%)</title><rect x="80.2817%" y="309" width="1.4085%" height="15" fill="rgb(224,130,29)" fg:x="57" fg:w="1"/><text x="80.5317%" y="319.50"></text></g><g><title>_dl_map_object_deps (3 samples, 4.23%)</title><rect x="78.8732%" y="565" width="4.2254%" height="15" fill="rgb(235,212,8)" fg:x="56" fg:w="3"/><text x="79.1232%" y="575.50">_dl_m..</text></g><g><title>_dl_catch_exception (3 samples, 4.23%)</title><rect x="78.8732%" y="549" width="4.2254%" height="15" fill="rgb(223,33,50)" fg:x="56" fg:w="3"/><text x="79.1232%" y="559.50">_dl_c..</text></g><g><title>openaux (3 samples, 4.23%)</title><rect x="78.8732%" y="533" width="4.2254%" height="15" fill="rgb(219,149,13)" fg:x="56" fg:w="3"/><text x="79.1232%" y="543.50">opena..</text></g><g><title>_dl_map_object (3 samples, 4.23%)</title><rect x="78.8732%" y="517" width="4.2254%" height="15" fill="rgb(250,156,29)" fg:x="56" fg:w="3"/><text x="79.1232%" y="527.50">_dl_m..</text></g><g><title>_dl_map_object_from_fd (2 samples, 2.82%)</title><rect x="80.2817%" y="501" width="2.8169%" height="15" fill="rgb(216,193,19)" fg:x="57" fg:w="2"/><text x="80.5317%" y="511.50">_d..</text></g><g><title>elf_get_dynamic_info (1 samples, 1.41%)</title><rect x="81.6901%" y="485" width="1.4085%" height="15" fill="rgb(216,135,14)" fg:x="58" fg:w="1"/><text x="81.9401%" y="495.50"></text></g><g><title>asm_exc_page_fault (1 samples, 1.41%)</title><rect x="81.6901%" y="469" width="1.4085%" height="15" fill="rgb(241,47,5)" fg:x="58" fg:w="1"/><text x="81.9401%" y="479.50"></text></g><g><title>exc_page_fault (1 samples, 1.41%)</title><rect x="81.6901%" y="453" width="1.4085%" height="15" fill="rgb(233,42,35)" fg:x="58" fg:w="1"/><text x="81.9401%" y="463.50"></text></g><g><title>do_user_addr_fault (1 samples, 1.41%)</title><rect x="81.6901%" y="437" width="1.4085%" height="15" fill="rgb(231,13,6)" fg:x="58" fg:w="1"/><text x="81.9401%" y="447.50"></text></g><g><title>handle_mm_fault (1 samples, 1.41%)</title><rect x="81.6901%" y="421" width="1.4085%" height="15" fill="rgb(207,181,40)" fg:x="58" fg:w="1"/><text x="81.9401%" y="431.50"></text></g><g><title>__handle_mm_fault (1 samples, 1.41%)</title><rect x="81.6901%" y="405" width="1.4085%" height="15" fill="rgb(254,173,49)" fg:x="58" fg:w="1"/><text x="81.9401%" y="415.50"></text></g><g><title>_dl_start_final (5 samples, 7.04%)</title><rect x="77.4648%" y="613" width="7.0423%" height="15" fill="rgb(221,1,38)" fg:x="55" fg:w="5"/><text x="77.7148%" y="623.50">_dl_start..</text></g><g><title>_dl_sysdep_start (5 samples, 7.04%)</title><rect x="77.4648%" y="597" width="7.0423%" height="15" fill="rgb(206,124,46)" fg:x="55" fg:w="5"/><text x="77.7148%" y="607.50">_dl_sysde..</text></g><g><title>dl_main (5 samples, 7.04%)</title><rect x="77.4648%" y="581" width="7.0423%" height="15" fill="rgb(249,21,11)" fg:x="55" fg:w="5"/><text x="77.7148%" y="591.50">dl_main</text></g><g><title>_dl_relocate_object (1 samples, 1.41%)</title><rect x="83.0986%" y="565" width="1.4085%" height="15" fill="rgb(222,201,40)" fg:x="59" fg:w="1"/><text x="83.3486%" y="575.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 1.41%)</title><rect x="83.0986%" y="549" width="1.4085%" height="15" fill="rgb(235,61,29)" fg:x="59" fg:w="1"/><text x="83.3486%" y="559.50"></text></g><g><title>elf_machine_rela (1 samples, 1.41%)</title><rect x="83.0986%" y="533" width="1.4085%" height="15" fill="rgb(219,207,3)" fg:x="59" fg:w="1"/><text x="83.3486%" y="543.50"></text></g><g><title>__x86_cacheinfo_ifunc (1 samples, 1.41%)</title><rect x="83.0986%" y="517" width="1.4085%" height="15" fill="rgb(222,56,46)" fg:x="59" fg:w="1"/><text x="83.3486%" y="527.50"></text></g><g><title>init_cacheinfo (1 samples, 1.41%)</title><rect x="83.0986%" y="501" width="1.4085%" height="15" fill="rgb(239,76,54)" fg:x="59" fg:w="1"/><text x="83.3486%" y="511.50"></text></g><g><title>asm_exc_page_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="485" width="1.4085%" height="15" fill="rgb(231,124,27)" fg:x="59" fg:w="1"/><text x="83.3486%" y="495.50"></text></g><g><title>exc_page_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="469" width="1.4085%" height="15" fill="rgb(249,195,6)" fg:x="59" fg:w="1"/><text x="83.3486%" y="479.50"></text></g><g><title>do_user_addr_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="453" width="1.4085%" height="15" fill="rgb(237,174,47)" fg:x="59" fg:w="1"/><text x="83.3486%" y="463.50"></text></g><g><title>handle_mm_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="437" width="1.4085%" height="15" fill="rgb(206,201,31)" fg:x="59" fg:w="1"/><text x="83.3486%" y="447.50"></text></g><g><title>__handle_mm_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="421" width="1.4085%" height="15" fill="rgb(231,57,52)" fg:x="59" fg:w="1"/><text x="83.3486%" y="431.50"></text></g><g><title>handle_pte_fault (1 samples, 1.41%)</title><rect x="83.0986%" y="405" width="1.4085%" height="15" fill="rgb(248,177,22)" fg:x="59" fg:w="1"/><text x="83.3486%" y="415.50"></text></g><g><title>do_anonymous_page (1 samples, 1.41%)</title><rect x="83.0986%" y="389" width="1.4085%" height="15" fill="rgb(215,211,37)" fg:x="59" fg:w="1"/><text x="83.3486%" y="399.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 1.41%)</title><rect x="83.0986%" y="373" width="1.4085%" height="15" fill="rgb(241,128,51)" fg:x="59" fg:w="1"/><text x="83.3486%" y="383.50"></text></g><g><title>memcg_check_events (1 samples, 1.41%)</title><rect x="83.0986%" y="357" width="1.4085%" height="15" fill="rgb(227,165,31)" fg:x="59" fg:w="1"/><text x="83.3486%" y="367.50"></text></g><g><title>_start (61 samples, 85.92%)</title><rect x="0.0000%" y="645" width="85.9155%" height="15" fill="rgb(228,167,24)" fg:x="0" fg:w="61"/><text x="0.2500%" y="655.50">_start</text></g><g><title>_dl_start (6 samples, 8.45%)</title><rect x="77.4648%" y="629" width="8.4507%" height="15" fill="rgb(228,143,12)" fg:x="55" fg:w="6"/><text x="77.7148%" y="639.50">_dl_start</text></g><g><title>elf_dynamic_do_Rela (1 samples, 1.41%)</title><rect x="84.5070%" y="613" width="1.4085%" height="15" fill="rgb(249,149,8)" fg:x="60" fg:w="1"/><text x="84.7570%" y="623.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 1.41%)</title><rect x="84.5070%" y="597" width="1.4085%" height="15" fill="rgb(243,35,44)" fg:x="60" fg:w="1"/><text x="84.7570%" y="607.50"></text></g><g><title>asm_exc_page_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="581" width="1.4085%" height="15" fill="rgb(246,89,9)" fg:x="60" fg:w="1"/><text x="84.7570%" y="591.50"></text></g><g><title>exc_page_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="565" width="1.4085%" height="15" fill="rgb(233,213,13)" fg:x="60" fg:w="1"/><text x="84.7570%" y="575.50"></text></g><g><title>do_user_addr_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="549" width="1.4085%" height="15" fill="rgb(233,141,41)" fg:x="60" fg:w="1"/><text x="84.7570%" y="559.50"></text></g><g><title>handle_mm_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="533" width="1.4085%" height="15" fill="rgb(239,167,4)" fg:x="60" fg:w="1"/><text x="84.7570%" y="543.50"></text></g><g><title>__handle_mm_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="517" width="1.4085%" height="15" fill="rgb(209,217,16)" fg:x="60" fg:w="1"/><text x="84.7570%" y="527.50"></text></g><g><title>handle_pte_fault (1 samples, 1.41%)</title><rect x="84.5070%" y="501" width="1.4085%" height="15" fill="rgb(219,88,35)" fg:x="60" fg:w="1"/><text x="84.7570%" y="511.50"></text></g><g><title>__mem_cgroup_charge (1 samples, 1.41%)</title><rect x="84.5070%" y="485" width="1.4085%" height="15" fill="rgb(220,193,23)" fg:x="60" fg:w="1"/><text x="84.7570%" y="495.50"></text></g><g><title>elf_map (1 samples, 1.41%)</title><rect x="85.9155%" y="501" width="1.4085%" height="15" fill="rgb(230,90,52)" fg:x="61" fg:w="1"/><text x="86.1655%" y="511.50"></text></g><g><title>vm_mmap (1 samples, 1.41%)</title><rect x="85.9155%" y="485" width="1.4085%" height="15" fill="rgb(252,106,19)" fg:x="61" fg:w="1"/><text x="86.1655%" y="495.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 1.41%)</title><rect x="85.9155%" y="469" width="1.4085%" height="15" fill="rgb(206,74,20)" fg:x="61" fg:w="1"/><text x="86.1655%" y="479.50"></text></g><g><title>do_mmap (1 samples, 1.41%)</title><rect x="85.9155%" y="453" width="1.4085%" height="15" fill="rgb(230,138,44)" fg:x="61" fg:w="1"/><text x="86.1655%" y="463.50"></text></g><g><title>perf-and-dhat-p (63 samples, 88.73%)</title><rect x="0.0000%" y="661" width="88.7324%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="63"/><text x="0.2500%" y="671.50">perf-and-dhat-p</text></g><g><title>entry_SYSCALL_64_after_hwframe (2 samples, 2.82%)</title><rect x="85.9155%" y="645" width="2.8169%" height="15" fill="rgb(242,16,51)" fg:x="61" fg:w="2"/><text x="86.1655%" y="655.50">en..</text></g><g><title>do_syscall_64 (2 samples, 2.82%)</title><rect x="85.9155%" y="629" width="2.8169%" height="15" fill="rgb(248,9,4)" fg:x="61" fg:w="2"/><text x="86.1655%" y="639.50">do..</text></g><g><title>__x64_sys_execve (2 samples, 2.82%)</title><rect x="85.9155%" y="613" width="2.8169%" height="15" fill="rgb(210,31,22)" fg:x="61" fg:w="2"/><text x="86.1655%" y="623.50">__..</text></g><g><title>do_execveat_common.isra.0 (2 samples, 2.82%)</title><rect x="85.9155%" y="597" width="2.8169%" height="15" fill="rgb(239,54,39)" fg:x="61" fg:w="2"/><text x="86.1655%" y="607.50">do..</text></g><g><title>bprm_execve (2 samples, 2.82%)</title><rect x="85.9155%" y="581" width="2.8169%" height="15" fill="rgb(230,99,41)" fg:x="61" fg:w="2"/><text x="86.1655%" y="591.50">bp..</text></g><g><title>bprm_execve.part.0 (2 samples, 2.82%)</title><rect x="85.9155%" y="565" width="2.8169%" height="15" fill="rgb(253,106,12)" fg:x="61" fg:w="2"/><text x="86.1655%" y="575.50">bp..</text></g><g><title>exec_binprm (2 samples, 2.82%)</title><rect x="85.9155%" y="549" width="2.8169%" height="15" fill="rgb(213,46,41)" fg:x="61" fg:w="2"/><text x="86.1655%" y="559.50">ex..</text></g><g><title>search_binary_handler (2 samples, 2.82%)</title><rect x="85.9155%" y="533" width="2.8169%" height="15" fill="rgb(215,133,35)" fg:x="61" fg:w="2"/><text x="86.1655%" y="543.50">se..</text></g><g><title>load_elf_binary (2 samples, 2.82%)</title><rect x="85.9155%" y="517" width="2.8169%" height="15" fill="rgb(213,28,5)" fg:x="61" fg:w="2"/><text x="86.1655%" y="527.50">lo..</text></g><g><title>load_elf_interp.constprop.0 (1 samples, 1.41%)</title><rect x="87.3239%" y="501" width="1.4085%" height="15" fill="rgb(215,77,49)" fg:x="62" fg:w="1"/><text x="87.5739%" y="511.50"></text></g><g><title>elf_map (1 samples, 1.41%)</title><rect x="87.3239%" y="485" width="1.4085%" height="15" fill="rgb(248,100,22)" fg:x="62" fg:w="1"/><text x="87.5739%" y="495.50"></text></g><g><title>vm_mmap (1 samples, 1.41%)</title><rect x="87.3239%" y="469" width="1.4085%" height="15" fill="rgb(208,67,9)" fg:x="62" fg:w="1"/><text x="87.5739%" y="479.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 1.41%)</title><rect x="87.3239%" y="453" width="1.4085%" height="15" fill="rgb(219,133,21)" fg:x="62" fg:w="1"/><text x="87.5739%" y="463.50"></text></g><g><title>do_mmap (1 samples, 1.41%)</title><rect x="87.3239%" y="437" width="1.4085%" height="15" fill="rgb(246,46,29)" fg:x="62" fg:w="1"/><text x="87.5739%" y="447.50"></text></g><g><title>mmap_region (1 samples, 1.41%)</title><rect x="87.3239%" y="421" width="1.4085%" height="15" fill="rgb(246,185,52)" fg:x="62" fg:w="1"/><text x="87.5739%" y="431.50"></text></g><g><title>perf_event_mmap (1 samples, 1.41%)</title><rect x="87.3239%" y="405" width="1.4085%" height="15" fill="rgb(252,136,11)" fg:x="62" fg:w="1"/><text x="87.5739%" y="415.50"></text></g><g><title>perf_event_mmap_event (1 samples, 1.41%)</title><rect x="87.3239%" y="389" width="1.4085%" height="15" fill="rgb(219,138,53)" fg:x="62" fg:w="1"/><text x="87.5739%" y="399.50"></text></g><g><title>perf_iterate_sb (1 samples, 1.41%)</title><rect x="87.3239%" y="373" width="1.4085%" height="15" fill="rgb(211,51,23)" fg:x="62" fg:w="1"/><text x="87.5739%" y="383.50"></text></g><g><title>perf_iterate_ctx (1 samples, 1.41%)</title><rect x="87.3239%" y="357" width="1.4085%" height="15" fill="rgb(247,221,28)" fg:x="62" fg:w="1"/><text x="87.5739%" y="367.50"></text></g><g><title>perf_event_mmap_output (1 samples, 1.41%)</title><rect x="87.3239%" y="341" width="1.4085%" height="15" fill="rgb(251,222,45)" fg:x="62" fg:w="1"/><text x="87.5739%" y="351.50"></text></g><g><title>perf_output_copy (1 samples, 1.41%)</title><rect x="87.3239%" y="325" width="1.4085%" height="15" fill="rgb(217,162,53)" fg:x="62" fg:w="1"/><text x="87.5739%" y="335.50"></text></g><g><title>asm_common_interrupt (1 samples, 1.41%)</title><rect x="88.7324%" y="453" width="1.4085%" height="15" fill="rgb(229,93,14)" fg:x="63" fg:w="1"/><text x="88.9824%" y="463.50"></text></g><g><title>common_interrupt (1 samples, 1.41%)</title><rect x="88.7324%" y="437" width="1.4085%" height="15" fill="rgb(209,67,49)" fg:x="63" fg:w="1"/><text x="88.9824%" y="447.50"></text></g><g><title>__common_interrupt (1 samples, 1.41%)</title><rect x="88.7324%" y="421" width="1.4085%" height="15" fill="rgb(213,87,29)" fg:x="63" fg:w="1"/><text x="88.9824%" y="431.50"></text></g><g><title>handle_edge_irq (1 samples, 1.41%)</title><rect x="88.7324%" y="405" width="1.4085%" height="15" fill="rgb(205,151,52)" fg:x="63" fg:w="1"/><text x="88.9824%" y="415.50"></text></g><g><title>handle_irq_event (1 samples, 1.41%)</title><rect x="88.7324%" y="389" width="1.4085%" height="15" fill="rgb(253,215,39)" fg:x="63" fg:w="1"/><text x="88.9824%" y="399.50"></text></g><g><title>__handle_irq_event_percpu (1 samples, 1.41%)</title><rect x="88.7324%" y="373" width="1.4085%" height="15" fill="rgb(221,220,41)" fg:x="63" fg:w="1"/><text x="88.9824%" y="383.50"></text></g><g><title>ilk_irq_handler (1 samples, 1.41%)</title><rect x="88.7324%" y="357" width="1.4085%" height="15" fill="rgb(218,133,21)" fg:x="63" fg:w="1"/><text x="88.9824%" y="367.50"></text></g><g><title>ivb_display_irq_handler (1 samples, 1.41%)</title><rect x="88.7324%" y="341" width="1.4085%" height="15" fill="rgb(221,193,43)" fg:x="63" fg:w="1"/><text x="88.9824%" y="351.50"></text></g><g><title>drm_crtc_handle_vblank (1 samples, 1.41%)</title><rect x="88.7324%" y="325" width="1.4085%" height="15" fill="rgb(240,128,52)" fg:x="63" fg:w="1"/><text x="88.9824%" y="335.50"></text></g><g><title>drm_handle_vblank (1 samples, 1.41%)</title><rect x="88.7324%" y="309" width="1.4085%" height="15" fill="rgb(253,114,12)" fg:x="63" fg:w="1"/><text x="88.9824%" y="319.50"></text></g><g><title>drm_update_vblank_count (1 samples, 1.41%)</title><rect x="88.7324%" y="293" width="1.4085%" height="15" fill="rgb(215,223,47)" fg:x="63" fg:w="1"/><text x="88.9824%" y="303.50"></text></g><g><title>drm_get_last_vbltimestamp (1 samples, 1.41%)</title><rect x="88.7324%" y="277" width="1.4085%" height="15" fill="rgb(248,225,23)" fg:x="63" fg:w="1"/><text x="88.9824%" y="287.50"></text></g><g><title>intel_crtc_get_vblank_timestamp (1 samples, 1.41%)</title><rect x="88.7324%" y="261" width="1.4085%" height="15" fill="rgb(250,108,0)" fg:x="63" fg:w="1"/><text x="88.9824%" y="271.50"></text></g><g><title>drm_crtc_vblank_helper_get_vblank_timestamp_internal (1 samples, 1.41%)</title><rect x="88.7324%" y="245" width="1.4085%" height="15" fill="rgb(228,208,7)" fg:x="63" fg:w="1"/><text x="88.9824%" y="255.50"></text></g><g><title>__intel_get_crtc_scanline (1 samples, 1.41%)</title><rect x="88.7324%" y="229" width="1.4085%" height="15" fill="rgb(244,45,10)" fg:x="63" fg:w="1"/><text x="88.9824%" y="239.50"></text></g><g><title>all (71 samples, 100%)</title><rect x="0.0000%" y="677" width="100.0000%" height="15" fill="rgb(207,125,25)" fg:x="0" fg:w="71"/><text x="0.2500%" y="687.50"></text></g><g><title>perf-exec (8 samples, 11.27%)</title><rect x="88.7324%" y="661" width="11.2676%" height="15" fill="rgb(210,195,18)" fg:x="63" fg:w="8"/><text x="88.9824%" y="671.50">perf-exec</text></g><g><title>entry_SYSCALL_64_after_hwframe (8 samples, 11.27%)</title><rect x="88.7324%" y="645" width="11.2676%" height="15" fill="rgb(249,80,12)" fg:x="63" fg:w="8"/><text x="88.9824%" y="655.50">entry_SYSCALL_64_..</text></g><g><title>do_syscall_64 (8 samples, 11.27%)</title><rect x="88.7324%" y="629" width="11.2676%" height="15" fill="rgb(221,65,9)" fg:x="63" fg:w="8"/><text x="88.9824%" y="639.50">do_syscall_64</text></g><g><title>__x64_sys_execve (8 samples, 11.27%)</title><rect x="88.7324%" y="613" width="11.2676%" height="15" fill="rgb(235,49,36)" fg:x="63" fg:w="8"/><text x="88.9824%" y="623.50">__x64_sys_execve</text></g><g><title>do_execveat_common.isra.0 (8 samples, 11.27%)</title><rect x="88.7324%" y="597" width="11.2676%" height="15" fill="rgb(225,32,20)" fg:x="63" fg:w="8"/><text x="88.9824%" y="607.50">do_execveat_commo..</text></g><g><title>bprm_execve (8 samples, 11.27%)</title><rect x="88.7324%" y="581" width="11.2676%" height="15" fill="rgb(215,141,46)" fg:x="63" fg:w="8"/><text x="88.9824%" y="591.50">bprm_execve</text></g><g><title>bprm_execve.part.0 (8 samples, 11.27%)</title><rect x="88.7324%" y="565" width="11.2676%" height="15" fill="rgb(250,160,47)" fg:x="63" fg:w="8"/><text x="88.9824%" y="575.50">bprm_execve.part.0</text></g><g><title>exec_binprm (8 samples, 11.27%)</title><rect x="88.7324%" y="549" width="11.2676%" height="15" fill="rgb(216,222,40)" fg:x="63" fg:w="8"/><text x="88.9824%" y="559.50">exec_binprm</text></g><g><title>search_binary_handler (8 samples, 11.27%)</title><rect x="88.7324%" y="533" width="11.2676%" height="15" fill="rgb(234,217,39)" fg:x="63" fg:w="8"/><text x="88.9824%" y="543.50">search_binary_han..</text></g><g><title>load_elf_binary (8 samples, 11.27%)</title><rect x="88.7324%" y="517" width="11.2676%" height="15" fill="rgb(207,178,40)" fg:x="63" fg:w="8"/><text x="88.9824%" y="527.50">load_elf_binary</text></g><g><title>begin_new_exec (8 samples, 11.27%)</title><rect x="88.7324%" y="501" width="11.2676%" height="15" fill="rgb(221,136,13)" fg:x="63" fg:w="8"/><text x="88.9824%" y="511.50">begin_new_exec</text></g><g><title>perf_event_exec (8 samples, 11.27%)</title><rect x="88.7324%" y="485" width="11.2676%" height="15" fill="rgb(249,199,10)" fg:x="63" fg:w="8"/><text x="88.9824%" y="495.50">perf_event_exec</text></g><g><title>perf_event_enable_on_exec (8 samples, 11.27%)</title><rect x="88.7324%" y="469" width="11.2676%" height="15" fill="rgb(249,222,13)" fg:x="63" fg:w="8"/><text x="88.9824%" y="479.50">perf_event_enable..</text></g><g><title>ctx_resched (7 samples, 9.86%)</title><rect x="90.1408%" y="453" width="9.8592%" height="15" fill="rgb(244,185,38)" fg:x="64" fg:w="7"/><text x="90.3908%" y="463.50">ctx_resched</text></g><g><title>x86_pmu_enable (7 samples, 9.86%)</title><rect x="90.1408%" y="437" width="9.8592%" height="15" fill="rgb(236,202,9)" fg:x="64" fg:w="7"/><text x="90.3908%" y="447.50">x86_pmu_enable</text></g><g><title>intel_pmu_enable_all (7 samples, 9.86%)</title><rect x="90.1408%" y="421" width="9.8592%" height="15" fill="rgb(250,229,37)" fg:x="64" fg:w="7"/><text x="90.3908%" y="431.50">intel_pmu_enab..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (7 samples, 9.86%)</title><rect x="90.1408%" y="405" width="9.8592%" height="15" fill="rgb(206,174,23)" fg:x="64" fg:w="7"/><text x="90.3908%" y="415.50">__intel_pmu_en..</text></g></svg></svg>